{"name":"gittle","version":"0.2.3","description":"Simple Node.js wrapper for the Git CLI","main":"index.js","scripts":{"test":"NODE_PATH=lib node_modules/.bin/nodeunit test/*-test.js"},"repository":{"type":"git","url":"git+ssh://git@github.com:FriendCode/gittle.js.git"},"keywords":["gittle","git","js"],"author":{"name":"FriendCode"},"license":"Apache v2","dependencies":{"pty.js":"0.2.5","lodash":"3.x.x || 2.4.x","q":"1.1.2"},"devDependencies":{"nodeunit":"0.8.2","tmp":"0.0.23"},"contributors":[{"name":"Aaron O'Mullan","email":"aaron.omullan@friendco.de"},{"name":"Samy Pesse","email":"samy.pesse@friendco.de"}],"gitHead":"cceeaa5a1ee5ea437ced324647c0ff026712b5b1","bugs":{"url":"https://github.com/FriendCode/gittle.js/issues"},"homepage":"https://github.com/FriendCode/gittle.js","_id":"gittle@0.2.3","_shasum":"c3f7039a67d5037fd2a57d219e31bbcb95394c39","_from":".","_npmVersion":"2.1.18","_nodeVersion":"0.10.33","_npmUser":{"name":"samypesse","email":"samypesse@gmail.com"},"maintainers":[{"name":"samypesse","email":"samypesse@gmail.com"}],"dist":{"shasum":"c3f7039a67d5037fd2a57d219e31bbcb95394c39","size":14440,"noattachment":false,"tarball":"http://registry.npm.taobao.org/gittle/download/gittle-0.2.3.tgz"},"directories":{},"publish_time":1423814975394,"_cnpm_publish_time":1423814975394,"readme":"Gittle\n=========\n\nA simple Node.js wrapper for the Git CLI. The API uses promises. This library is used in [Codebox](https://github.com/FriendCode/codebox).\n\n### Installation\n\n```\nnpm install gittle\n```\n\n### How to use it?\n\n```javascript\nvar Gittle = require(\"gittle\");\n```\n\n* Load a repository: ```var repo = new Gittle(\"./\");```\n* Clone a repository: ```Gittle.clone(\"https://github.com/FriendCode/gittle.js.git\", \"./test\")```\n* Initialize an empty repository: ```Gittle.init(\"./test\")```\n\nCheck out [Authentication](#authentication) about how to configure https/ssh authentication for cloning.\n\n* * *\n\n### Repository:\n\n##### Status\n\n* Get status: ```repo.status()```\n\n##### Identity\n\n* Get identity: ```repo.identity()```, Returns an [Actor](#actor) object\n* Set identity: ```repo.identify(actor)```, actor is an object like: ```{name: \"\", email: \"\"}```\n\n##### Push/pull\n\n* Pull: ```repo.pull(remote, branch)```\n* Push: ```repo.push(remote, branch)```\n* Fetch: ```repo.fetch(remote)```\n\nCheck out [Authentication](#authentication) about how to configure https/ssh authentication.\n\n##### Commits\n\nA commit is representated by a [Commit](#commit) object.\n\n* List all commits: ```repo.commits(start, limit, skip)```\n* Commit changes: ```repo.commit(message, options)```\n\n##### Tags\n\n* List all tags: ```repo.tags()```\n* Create a new tag: ```repo.create_tag(name, options)```\n* Delete a tag: ```repo.delete_tag(name)```\n\n##### Branches\n\nA branch is representated by a [Head](#ref) object.\n\n* List all branches: ```repo.branches()```\n* Get a branch from its name: ```repo.branche(name)```\n* Create a branch: ```repo.create_branch(name)```\n* Delete a branch: ```repo.delete_branch(name)```\n\n##### Remotes\n\n* List all remotes: ```repo.remotes()```\n* Add a remote: ```repo.remore_add(name, url)```\n* Delete a remote: ```repo.remote_remove(name)```\n\n* * *\n\n### Commit\n\n* ```commit.id```: (String) id for this commit\n* ```commit.author```: ([Actor](#actor)) author of this commit\n* ```commit.commiter```: ([Actor](#actor)) commiter of this commit\n* ```commit.message```: (String) message for this commit\n* ```commit.authored_date```: (String) date when the commit was authored\n* ```commit.committed_date```: (String) date when the commit was commited\n* Get the files tree for this commit: ```commit.tree()```\n* Get the parents commits: ```commit.parents()```\n\n* * *\n\n### Actor\n\n* ```actor.name```: (String) name of this actor\n* ```actor.email```: (String) email address of this actor\n* ```actor.hash```: (String) hash of this actor (md5 hash of the email)\n\n* * *\n\n### Ref\n\nClass **Head** inherit from **Ref**.\n\n* ```ref.name```: (String) name of this reference\n* ```ref.commit```: ([Commit](#commit)) commit related to this ref.\n\n* * *\n\n### Authentication\n\nA last argument could be use for authentication on ```Gittle.clone```, ```repo.push```, ```repo.pull```, ```repo.fetch```:\n```javascript\n{\n    // SSH:\n    'passphrase': \"...\",\n    'refuseUnknownHost': true, // Default is false\n    \n    // HTTPS:\n    'username': \"...\",\n    'password': \"...\"\n}\n```\n","_etag":"\"1193-J68/rTzRQ3wM+t5YWvK+qw\""}