{"name":"shux","version":"1.0.0","description":"streaming shell multiplexer","main":"index.js","dependencies":{"pty.js":"~0.2.1","duplexer":"~0.0.3","headless-terminal":"~0.4.0","through":"~2.2.0","inherits":"~1.0.0"},"devDependencies":{"tap":"~0.4.0","secure-peer":"~0.2.0","request":"~2.14.0"},"scripts":{"test":"tap test/*.js"},"repository":{"type":"git","url":"git://github.com/substack/shux.git"},"homepage":"https://github.com/substack/shux","keywords":["shell","multiplex","terminal","tmux","screen","attach","detach"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"e9efac60412d7b44df06f12d235f40247ce021f7","bugs":{"url":"https://github.com/substack/shux/issues"},"_id":"shux@1.0.0","_shasum":"962c3231b9ec8a3d5dabf4370cdf612baad75e50","_from":".","_npmVersion":"2.3.0","_nodeVersion":"0.12.0","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"substack@gmail.com"}],"dist":{"shasum":"962c3231b9ec8a3d5dabf4370cdf612baad75e50","size":6787,"noattachment":false,"tarball":"http://registry.npm.taobao.org/shux/download/shux-1.0.0.tgz"},"directories":{},"publish_time":1423814969474,"_cnpm_publish_time":1423814969474,"readme":"# shux\n\nstreaming shell multiplexer\n\n[![build status](https://secure.travis-ci.org/substack/shux.png)](http://travis-ci.org/substack/shux)\n\nlike screen or tmux but as pure javascript library instead of a program\n\n# example\n\n## re-attachable single-session tcp shell server\n\nserver.js:\n\n``` js\nvar net = require('net');\nvar shux = require('shux')();\nshux.createShell('xyz');\n\nvar server = net.createServer(function (stream) {\n    var sh = shux.attach('xyz');\n    stream.pipe(sh).pipe(stream);\n});\nserver.listen(5000);\n```\n\nYou can connect to this server directly with netcat or telnet but it will have\nannoying local echo and won't have a way to detach without externally killing\nthe process. Here's a client script you can use that detaches on `ctrl-a d`\n(like gnu screen) and sets raw mode to turn off local echo:\n\nclient.js:\n\n``` js\nvar net = require('net');\nvar through = require('through');\n\nvar state = { meta: false };\nvar keyboard = through(function (buf) {\n    if (buf.length === 1 && buf[0] === 1) return state.meta = true;\n    \n    if (state.meta && buf[0] === 'd'.charCodeAt(0)) {\n        process.exit();\n    }\n    else this.queue(buf);\n    state.meta = false;\n});\n\nvar c = net.connect(5000);\nkeyboard.pipe(c).pipe(process.stdout);\n\nprocess.stdin.setRawMode(true);\nprocess.stdin.pipe(keyboard);\n\nprocess.on('exit', function () {\n    process.stdin.setRawMode(false);\n    console.log();\n});\n```\n\n# methods\n\n``` js\nvar shux = require('shux')\n```\n\n## var shx = shux()\n\nCreate a new shell multiplexer `shx`.\n\n## var sh = shx.createShell(id, opts)\n\nCreate a shell with the name `id` or `opts.id`.\n\nReturn a duplex stream `sh` that can be hooked into the local stdin and stdout\nto obtain a shell session. When the session ends, the shell will still be alive\nand can be re-attached with `shx.attach(id)`.\n\nOptionally, you can set:\n\n* opts.command - the command to use for the shell, default: `'bash'`\n* opts.arguments - extra arguments to pass to the `opts.command`, default: `[]`\n* opts.columns - width of the session in characters\n* opts.rows - height of the session in characters\n\n## var sh = shx.attach(id, opts)\n\nConnect to the session at `id` if it exists, returning a duplex stream `sh`.\nOtherwise return `undefined`.\n\nOptionally, you can set:\n\n* opts.columns - width of the session in characters\n* opts.rows - height of the session in characters\n\n## shx.destroy(id, sig)\n\nSend a kill signal to the shell process at `id`, if it exists.\n\n## shx.list()\n\nReturn a list of the active shell id strings.\n\n# events\n\n## shx.on('spawn', function (id) {})\n\nWhen a subshell gets spawned, the `'spawn'` event fires for that shell `id`.\n\n## shx.on('exit', function (id) {})\n\nWhen a subshell exits, the `'exit'` event fires for that shell `id`.\n\n## shx.on('attach', function (id) {})\n\nWhen a subshell is attached, the `'attach'` event fires for that shell `id`.\n\n## shx.on('detach', function (id) {})\n\nWhen a subshell is detached, the `'detach'` event fires for that shell `id`.\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install shux\n```\n\n# license\n\nMIT\n","_etag":"\"1163-MoY2iVI7YFXp5cON+Z4Uew\""}